params {
    samplesheet = false
    samplesheet_sep = ","
    sample_col = "sample"
    path_col = "path"
    umi_len = 10
    min_reads = 100
    results = false
    genome_fasta = false
    k = 2
    flags = "--no_umi True --skip_remap True --ignore True"
    max_cpus = 32
    max_memory = '240.GB'

    container__samtools = "quay.io/biocontainers/samtools:1.16.1--h6899075_1"
    container__bedtools = "quay.io/biocontainers/bedtools:2.29.2"
    container__misc = "quay.io/hdc-workflows/souper-star:81564ce"
    container__archr = "hisplan/archr:0.9.x-snapshot-20200922"
    container__souporcell = "quay.io/cumulus/souporcell:2021.03"
}

process {
    withLabel: io_limited {
        cpus   = { check_max( 2    * task.attempt, 'cpus'   ) }
        memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    }
    withLabel: cpu_large {
        cpus   = { check_max( 16    * task.attempt, 'cpus'   ) }
        memory = { check_max( 30.GB * task.attempt, 'memory' ) }
    }
    withLabel: mem_large {
        cpus   = { check_max( 16    * task.attempt, 'cpus'   ) }
        memory = { check_max( 120.GB * task.attempt, 'memory' ) }
    }

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
